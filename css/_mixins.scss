@mixin interpolate($property, $min-screen, $min-value, $max-screen, $max-value, $easing : "linear", $bending-points : 2) {
	// Default Easing 'Linear'
	$p0 : 0;
	$p1 : 0;
	$p2 : 1;
	$p3 : 1;

	// Parse Cubic Bezier string
	@if(str-slice($easing, 1, 12)=="cubic-bezier") {
		// Get the values between the brackets
		// TODO: Deal with different whitespace
		$i : str-index($easing, ")"); // Get index of closing bracket
		$values : str-slice($easing, 14, $i - 1); // Extract values between brackts
		$list : explode($values, ", "); // Split the values into a list

		@debug($list);

		// Cast values to numebrs
		$p0 : number(nth($list, 1));
		$p1 : number(nth($list, 2));
		$p2 : number(nth($list, 3));
		$p3 : number(nth($list, 4));
	}

	@if($easing=="ease") {
		$p0 : 0.25;
		$p1 : 1;
		$p2 : 0.25;
		$p3 : 1;
	}

	@if($easing=="ease-in-out") {
		$p0 : 0.42;
		$p1 : 0;
		$p2 : 0.58;
		$p3 : 1;
	}

	@if($easing=="ease-in") {
		$p0 : 0.42;
		$p1 : 0;
		$p2 : 1;
		$p3 : 1;
	}

	@if($easing=="ease-out") {
		$p0 : 0;
		$p1 : 0;
		$p2 : 0.58;
		$p3 : 1;
	}

	#{$property} : $min-value;

	@if($easing=="linear"or $bending-points < 1) {
		@media screen and (min-width: $min-screen) {
			#{$property} : calc-interpolation($min-screen, $min-value, $max-screen, $max-value);
		}
	}

	@else {
		// Loop through bending points
		$t : 1 / ($bending-points + 1);
		$i : 1;
		$prev-screen : $min-screen;
		$prev-value : $min-value;

		@while $t*$i <=1 {
			$bending-point : $t*$i;
			$value : cubic-bezier($p0, $p1, $p2, $p3, $bending-point);
			$screen-int : lerp($min-screen, $max-screen, $bending-point);
			$value-int : lerp($min-value, $max-value, $value);

			@media screen and (min-width: $prev-screen) {
				#{$property} : calc-interpolation($prev-screen, $prev-value, $screen-int, $value-int);
			}

			$prev-screen : $screen-int;
			$prev-value : $value-int;
			$i : $i+1;
		}
	}

	@media screen and (min-width:$max-screen) {
		#{$property} : $max-value;
	}
}

//Responsive Web Desin Mixins
@mixin media-min($mn-wdith) {
    @media only screen and (min-width: $mn-wdith) {
        @content;
    }
}

@mixin media-max($mx-wdith) {
  @media only screen and (max-width: $mx-wdith) {
      @content;
  }
}

@mixin desktop-xl {
  @media only screen and (min-width: $desktop-xl-breakpoint) {
    @content;
  }
}

@mixin desktop {
  @media only screen and (min-width: $desktop-breakpoint) {
    @content;
  }
}

@mixin tablet {
  @media only screen and (min-width: $tab-breakpoint) {
    @content;
  }
}

@mixin mobile {
    @media only screen and (min-width: $mobile-breakpoint) {
      @content;
    }
  }